R
"I am boreed"
hell <- "The programming"
hell
## Fill maze with blocks
maze <- matrix(nrow = 18, ncol = 17)
maze[, ] <- "#"
## Print Maze
print_board <- function(board) {
nr <- nrow(board)
nc <- ncol(board)
v <- paste(as.vector(t(board)), collapse = "")
for (i in 1:nr)
print(substr(v, (i - 1) * nc + 1, (i - 1) * nc + nc))
}
## Generate maze
path <- 0
x <- 16
y <- 17
while(path < 800) {
direction <- rep(0, 2) # Reset directions (two dimensons)
direction[sample(1:2, 1)] <- sample(c(-1, 1), 1) # Random direction
passage <- sample(1:6, 1) # Random Length of passage
for (i in 1:passage) {
maze[y, x] <- " "
## Set temp location to check impact
xt <- x + direction[1]
yt <- y + direction[2]
## Border test
if (xt != 1 & xt != 17 & yt != 1 & yt != 18) {
path <- path + 1
## Cavern test
tile <- maze[yt, xt]
maze[yt, xt] <- " "
if (sum(maze[(yt - 1):yt, (xt - 1):xt] == " ") != 4 &
sum(maze[(yt - 1):yt, xt:(xt + 1)] == " ") != 4 &
sum(maze[yt:(yt + 1), (xt - 1):xt] == " ") != 4 &
sum(maze[yt:(yt + 1), xt:(xt + 1)] == " ") != 4) {
# Move drill
x <- xt
y <- yt
} else maze[yt, xt] <- tile
}
}
}
## Locate exit
tile <- "#"
while (tile == "#") {
x <- sample(2:16, 1)
y <- sample(2:7, 1)
tile <- maze[y, x]
}
maze[y, x] <- "H"
tile <- "#"
while (tile == "#") {
x <- sample(2:16, 1)
y <- sample(2:5, 1)
tile <- maze[y, x]
}
maze[y, x] <- "R"
place_player <- function(x, y, compass) {
tokens <- c("^", ">", "V", "<")
maze[y, x] <<- tokens[which(compass == c("N", "E", "S", "W"))]
}
place_player(16, 17, ifelse(maze[16, 16] != "#", "N", "W"))
print_board(maze)
## Sound library
library(beepr)
df$duration_in_minutes <- df$duration_in_minutes_int
summary
for (col in colnames(df))
print(cat("How many nulls in", col, "columns is: ", sum(is.na(df$col))))
summary
for (col in colnames(df))
print(cat("How many nulls in", col, "columns is: ", sum(is.na(df$col))))
for (col in colnames(df))
print(cat("How many nulls in", col, "columns is: ", sum(is.na(df$col))))
install.packages("RSQLite")
install.packages("DBI")
install.packages("pastecs")
install.packages("DBI")
install.packages("shiny")
library(beepr)
library(DBI)
library(RSQLite)
library(dplyr)
library(tidyr)
library(shiny)
library(ggplot2)
con <- dbConnect(RSQLite::SQLite(), "../database.db")
df$duration_in_minutes <- df$duration_in_minutes_int
drops <- c("duration_in_minutes_int")
df = df[ , !(names(df) %in% drops)]
print(summary(df))
df$duration_in_minutes <- df$duration_in_minutes_int
drops <- c("duration_in_minutes_int")
df = df[ , !(names(df) %in% drops)]
print(summary(df))
head(df)
num_cols <- sapply(df, is.numeric)
num_df <- df[, num_cols]
for (col in colnames(num_df))
std_val <- apply(df$col, 1, sd)
num_cols <- sapply(df, is.numeric)
for (col in colnames(num_cols))
std_val <- apply(df$col, 1, sd)
mean_val <- apply(df$col, 1, mean)
num_cols <- sapply(df, is.numeric)
for (col in num_cols)
std_val <- apply(df$col, 1, sd)
num_cols <- sapply(df, 1 ,is.numeric)
install.packages("RSQLite")
install.packages("DBI")
install.packages("pastecs")
install.packages("RSQLite")
install.packages("shiny")
library(beepr)
library(DBI)
library(RSQLite)
library(dplyr)
library(tidyr)
library(shiny)
library(ggplot2)
con <- dbConnect(RSQLite::SQLite(), "../database.db")
df$duration_in_minutes <- df$duration_in_minutes_int
drops <- c("duration_in_minutes_int")
df = df[ , !(names(df) %in% drops)]
print(summary(df))
head(df)
num_cols <- sapply(df, is.numeric)
num_df <- df[, num_cols]
for (col in colnames(num_df))
std_val <- apply(df$col, 1, sd)
numirecal_cols = c("viewCount, likeCount, commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols)
std_val <- apply(df$col, 1, sd)
numirecal_cols = c("viewCount, likeCount, commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols)
std_val <- apply(df$col, 2, sd)
numirecal_cols = c("viewCount, likeCount, commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols)
std_val <- sd(df$col)
mean_val <- mean(df$col)
median_val <- median(df$col)
sprintf("The std of this column is: ",
std_val,", the mean is: ", mean_val,
" and the  median (Q2) is: ", median_val)
numirecal_cols = c("viewCount, likeCount, commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols)
std_val <- sd(df$col)
mean_val <- mean(df$col)
median_val <- median(df$col)
print(sprintf("The std of this column is: ",
std_val,", the mean is: ", mean_val,
" and the  median (Q2) is: ", median_val))
numirecal_cols = c("viewCount, likeCount, commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols)
std_val <- sd(df$col)
mean_val <- mean(df$col)
median_val <- median(df$col)
print(sprintf("The std of this column is: ",
std_val,", the mean is: ", mean_val,
" and the  median (Q2) is: ", median_val))
numirecal_cols = c("viewCount, likeCount, commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols)
std_val <- sd(df$col)
mean_val <- mean(df$col)
median_val <- median(df$col)
print(sprintf("The std of this column is: ",
std_val,", the mean is: ", mean_val,
" and the  median (Q2) is: ", median_val))
numirecal_cols = c("viewCount, likeCount, commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols)
std_val <- sd(df$col)
mean_val <- mean(df$col)
median_val <- median(df$col)
print(sprintf("The std of this column is: ",
std_val,", the mean is: ", mean_val,
" and the  median (Q2) is: ", median_val))
numirecal_cols = c("viewCount, likeCount, commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols)
std_val <- sd(df$col)
mean_val <- mean(df$col)
median_val <- median(df$col)
print(sprintf("The std of this column is: ",
std_val,", the mean is: ", mean_val,
" and the  median (Q2) is: ", median_val))
numirecal_cols = c("viewCount, likeCount, commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols)
std_val <- lapply(df$col, sd, na.rm = TRUE)
mean_val <- lapply(df$col, mean, na.rm = TRUE)
median_val <- lapply(df$col, median, na.rm = TRUE)
print(sprintf("The std of this column is: ",
std_val,", the mean is: ", mean_val,
" and the  median (Q2) is: ", median_val))
numirecal_cols = c("viewCount, likeCount, commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols)
std_val <- lapply(df$col, sd, na.rm = TRUE)
mean_val <- lapply(df$col, mean, na.rm = TRUE)
median_val <- lapply(df$col, median, na.rm = TRUE)
print(sprintf("The std of this column is: ",
std_val,", the mean is: ", mean_val,
" and the  median (Q2) is: ", median_val))
numirecal_cols = c("viewCount, likeCount, commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols)
std_val <- lapply(df$col, sd, na.rm = TRUE)
mean_val <- lapply(df$col, mean, na.rm = TRUE)
median_val <- lapply(df$col, median, na.rm = TRUE)
print(std_val)
numirecal_cols = c("viewCount, likeCount, commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols)
std_val <- lapply(df$col, sd, na.rm = TRUE)
mean_val <- lapply(df$col, mean, na.rm = TRUE)
median_val <- lapply(df$col, median, na.rm = TRUE)
print(std_val)
numirecal_cols = c("viewCount, likeCount, commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols)
std_val <- as.numeric(lapply(df$col, sd, na.rm = TRUE))
mean_val <- as.numeric(lapply(df$col, mean, na.rm = TRUE))
median_val <- as.numeric(lapply(df$col, median, na.rm = TRUE))
print(std_val)
numirecal_cols <- c("viewCount", "likeCount", "commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols) {
std_val <- as.numeric(lapply(df[[col]], sd, na.rm = TRUE))
mean_val <- as.numeric(lapply(df[[col]], mean, na.rm = TRUE))
median_val <- as.numeric(lapply(df[[col]], median, na.rm = TRUE))
print(std_val)
}
numirecal_cols = c("viewCount, likeCount, commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols) {
std_val <- sd(df$col)
mean_val <- mean(df$col)
median_val <- median(df$col)
sprintf("The std of this column is: ",
std_val,", the mean is: ", mean_val,
" and the  median (Q2) is: ", median_val)};
numirecal_cols = c("viewCount, likeCount, commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols) {
std_val <- sd(df$col)
mean_val <- mean(df$col)
median_val <- median(df$col)
sprintf("The std of this column is: ",
std_val,", the mean is: ", mean_val,
" and the  median (Q2) is: ", median_val)}
numirecal_cols = c("viewCount, likeCount, commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols) {
std_val <- sd(df$col)
mean_val <- mean(df$col)
median_val <- median(df$col)
sprintf("The std of this column is: ",
std_val,", the mean is: ", mean_val,
" and the  median (Q2) is: ", median_val)
}
numirecal_cols = c("viewCount, likeCount, commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols) {
std_val <- sd(df$col)
mean_val <- mean(df$col)
median_val <- median(df$col)
print("The std of this column is: ",
std_val,", the mean is: ", mean_val,
" and the  median (Q2) is: ", median_val)
}
numirecal_cols = c("viewCount, likeCount, commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols) {
std_val <- sd(df$col)
mean_val <- mean(df$col)
median_val <- median(df$col)
print(std_val)
}
numirecal_cols = c("viewCount, likeCount, commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols) {
std_val <- as.numeric(lapply(df[[col]], sd, na.rm = TRUE))
mean_val <- as.numeric(lapply(df[[col]], mean, na.rm = TRUE))
median_val <- as.numeric(lapply(df[[col]], median, na.rm = TRUE))
print(std_val)
}
numirecal_cols = c("viewCount, likeCount, commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols) {
std_val <- as.numeric(lapply(df$col, sd, na.rm = TRUE))
mean_val <- as.numeric(lapply(df$col, mean, na.rm = TRUE))
median_val <- as.numeric(lapply(df$col, median, na.rm = TRUE))
print(std_val)
}
numirecal_cols = c("viewCount, likeCount, commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols) {
std_val <- as.numeric(lapply(df$col, sd, na.rm = TRUE))
mean_val <- as.numeric(lapply(df$col, mean, na.rm = TRUE))
median_val <- as.numeric(lapply(df$col, median, na.rm = TRUE))
print(mean_val)
}
numirecal_cols = c("viewCount, likeCount, commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols) {
std_val <- lapply(df$col, sd, na.rm = TRUE)
mean_val <- lapply(df$col, mean, na.rm = TRUE)
median_val <- lapply(df$col, median, na.rm = TRUE)
print(mean_val)
}
numirecal_cols = c("viewCount, likeCount, commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols) {
std_val <- lapply(df$col, sd, na.rm = TRUE)
mean_val <- lapply(df$col, mean, na.rm = TRUE)
median_val <- lapply(df$col, median, na.rm = TRUE)
print(mean_val)
}
numirecal_cols = c("viewCount, likeCount, commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols) {
std_val <- as.numeric(sapply(df$col, sd, na.rm = TRUE))
mean_val <- as.numeric(sapply(df$col, mean, na.rm = TRUE))
median_val <- as.numeric(sapply(df$col, median, na.rm = TRUE))
print(mean_val)
}
numirecal_cols = c("viewCount, likeCount, commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols) {
std_val <- as.numeric(sapply(df$col, sd, na.rm = TRUE))
mean_val <- as.numeric(sapply(df$col, mean, na.rm = TRUE))
median_val <- as.numeric(sapply(df$col, median, na.rm = TRUE))
print(mean_val)
}
numirecal_cols = c("viewCount, likeCount, commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols) {
std_val <- as.numeric(sapply(df$col, sd, na.rm = TRUE))
mean_val <- as.numeric(sapply(df$col, mean, na.rm = TRUE))
median_val <- as.numeric(sapply(df$col, median, na.rm = TRUE))
print(mean_val)
}
numirecal_cols = c("viewCount, likeCount, commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols) {
std_val <- as.numeric(sapply(df$col, sd, na.rm = TRUE))
mean_val <- as.numeric(sapply(df$col, mean, na.rm = TRUE))
median_val <- as.numeric(sapply(df$col, median, na.rm = TRUE))
print(mean_val)
}
numirecal_cols = c("viewCount, likeCount, commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols) {
std_val <- as.numeric(sapply(df$col, sd, na.rm = TRUE))
mean_val <- as.numeric(sapply(df$col, mean, na.rm = TRUE))
median_val <- as.numeric(sapply(df$col, median, na.rm = TRUE))
print(mean_val)
}
numirecal_cols = c("viewCount, likeCount, commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols) {
std_val <- as.numeric(sapply(df$col, sd, na.rm = TRUE))
mean_val <- as.numeric(sapply(df$col, mean, na.rm = TRUE))
median_val <- as.numeric(sapply(df$col, median, na.rm = TRUE))
print(mean_val)
}
numirecal_cols = c("viewCount, likeCount, commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols) {
std_val <- as.numeric(sapply(df$col, sd, na.rm = TRUE))
mean_val <- as.numeric(sapply(df$col, mean, na.rm = TRUE))
median_val <- as.numeric(sapply(df$col, median, na.rm = TRUE))
print(mean_val)
}
numirecal_cols = c("viewCount, likeCount, commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols) {
std_val <- as.numeric(sapply(df$col, sd, na.rm = TRUE))
mean_val <- as.numeric(sapply(df$col, mean, na.rm = TRUE))
median_val <- as.numeric(sapply(df$col, median, na.rm = TRUE))
print(mean_val)
}
numirecal_cols = c("viewCount, likeCount, commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols) {
std_val <- as.numeric(sapply(df$col, sd, na.rm = TRUE))
mean_val <- as.numeric(sapply(df$col, mean, na.rm = TRUE))
median_val <- as.numeric(sapply(df$col, median, na.rm = TRUE))
print(mean_val)
}
numirecal_cols = c("viewCount, likeCount, commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols) {
std_val <- as.numeric(sapply(df$col, sd, na.rm = TRUE))
mean_val <- as.numeric(sapply(df$col, mean, na.rm = TRUE))
median_val <- as.numeric(sapply(df$col, median, na.rm = TRUE))
print(mean_val)
}
numirecal_cols = c("viewCount, likeCount, commentCount",
"duration_in_minutes", "subscribers",
"total_views", "video_count")
for (col in numirecal_cols) {
std_val <- as.numeric(sapply(df$col, sd, na.rm = TRUE))
mean_val <- as.numeric(sapply(df$col, mean, na.rm = TRUE))
median_val <- as.numeric(sapply(df$col, median, na.rm = TRUE))
print(mean_val)
}
print(mean(df$likeCount))
numirecal_cols = c(viewCount, likeCount, commentCount,
duration_in_minutes, subscribers,
total_views, video_count)
numirecal_cols = c(df$viewCount, df$likeCount, df$commentCount,
df$duration_in_minutes, df$subscribers,
df$total_views, df$video_count)
for (col in numirecal_cols) {
std_val <- as.numeric(sapply(col, sd, na.rm = TRUE))
mean_val <- as.numeric(sapply(col, mean, na.rm = TRUE))
median_val <- as.numeric(sapply(col, median, na.rm = TRUE))
print(mean_val)
}
print(mean(df$likeCount))
numirecal_cols = c(df$viewCount, df$likeCount, df$commentCount,
df$duration_in_minutes, df$subscribers,
df$total_views, df$video_count)
for (col in numirecal_cols)
std_val <- sd(col)
mean_val <- mean(col)
median_val <- median(col)
sprintf("The std of this column is: ",
std_val,", the mean is: ", mean_val,
" and the  median (Q2) is: ", median_val)
numirecal_cols = c(df$viewCount, df$likeCount, df$commentCount,
df$duration_in_minutes, df$subscribers,
df$total_views, df$video_count)
for (col in numirecal_cols) {
std_val <- sd(col)
mean_val <- mean(col)
median_val <- median(col)
sprintf("The std of this column is: ",
std_val,", the mean is: ", mean_val,
" and the  median (Q2) is: ", median_val)
}
numirecal_cols = c(df$viewCount)
for (col in numirecal_cols) {
std_val <- sd(col)
mean_val <- mean(col)
median_val <- median(col)
sprintf("The std of this column is: ",
std_val,", the mean is: ", mean_val,
" and the  median (Q2) is: ", median_val)
}
reticulate::repl_python()
